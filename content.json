{"meta":{"title":"LZ成长史","subtitle":"学之 用之","description":"每天都学一点点","author":"lan Zhen","url":"http://fallingflower.github.io"},"pages":[{"title":"关于","date":"2018-08-01T02:14:55.000Z","updated":"2018-08-01T02:31:44.153Z","comments":true,"path":"about/index.html","permalink":"http://fallingflower.github.io/about/index.html","excerpt":"","text":"自我介绍 我是LZ一个刚起步的前端学习者 联系方式 QQ：1173916972Email：1173916972@qq.com"},{"title":"categories","date":"2018-08-01T02:10:36.000Z","updated":"2018-08-01T04:19:16.937Z","comments":false,"path":"categories/index.html","permalink":"http://fallingflower.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-08-01T02:13:40.000Z","updated":"2018-08-01T04:18:47.855Z","comments":false,"path":"tags/index.html","permalink":"http://fallingflower.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"图解HTTP读书笔记","slug":"图解HTTP读书笔记","date":"2018-09-08T00:17:47.000Z","updated":"2018-09-08T15:08:46.090Z","comments":true,"path":"2018/09/08/图解HTTP读书笔记/","link":"","permalink":"http://fallingflower.github.io/2018/09/08/图解HTTP读书笔记/","excerpt":"","text":"HTTP协议HTTP协议（超文本传输协议）是用于服务器传输超文本到本地浏览器的传输协议，基于TCP/IP通信协议来传输协议。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。优点简单快速，灵活，无连接，无状态。 TCP/IP协议分层应用层：提供应用服务时通信的活动，包括FTP,DNS,HTTP协议也在应用层上。传输层：提供处于网络连接中两台计算机之间的数据传输，包括TCP（传输控制协议）UDP（用户数据报协议）。网络层：用于处理在网络上流动的数据包规定了传输路线。链路层：用来处理连接网络的硬件部分。 TCP协议TCP是面向连接的协议，为了方便传输将大块数据分割成以报文段为单位的数据包进行管理，基于字节流服务，准确无误地将数据包送达目标处，采用三次握手建立连接 三次握手首先客户端发送标有SYN的数据包，表示我要建立连接发送数据了，服务端收到后发送标有SYN/ACK的数据包，表示我收到了确认建立连接，客户端最后发送标有ACK的数据包，表示成功建立连接。其中ACK是确认序号有效，SYN是发起一个新连接，FIN释放一个连接。 四次挥手客户端发送标有FIN的数据包表示要断开连接，服务端收到后发送ACK数据包确认，此时关闭了客户端到服务的连接 ，客户端不能再向服务端发送信息，却可以接受信息，完全断开连接需要服务端向客户端发送断开连接的请求标有FIN的数据包，同时客户端收到 请求后，发送ACK表示确认断开连接。到此通过四步双方的连接断开。 TCP和UDP的区别 UDPUDP是一个非连接的协议，传输数据之前和终端不建立连接，传递时就简单地去抓取来自应用程序的数据，并尽可能地把它扔在网络 上 ，尽最大努力交付，即不保证可靠交付，面向报文只添加首部，不拆分排序。 区别1、面向连接和面向非连接；2、对系统资源要求（TCP较多，UDP较少）；3、TCP为流模式，UDP数据报文模式；4、TCP保证数据的正确性，UDP可能丢包，TCP保证数据的顺序，UDP不能；5、TCP连接点到点，UDP支持一对一，一对多，多对一，多对多交互通信（经常用于视频会议）；6、TCP逻辑通信信道是全双工可靠信道，UDP不可靠信道。 HTTP请求&amp;相应报文request line：包括请求方法，请求URI，协议版本header：包括请求（响应）首部字段，通用首部字段，实体首部字段空行可选的报文主体例如：GET /index.htm http 1.1Host:hacker.jp 告知服务器意图的HTTP方法GET：获取资源POST：传输实体主体PUT：传输文件HEAD：获得报文首部DELETE：删除文件 GET和POST区别GET在浏览器回退时是无害的，而POST会再次提交请求。GET产生的URL地址可以被Bookmark，而POST不可以。GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST没有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。GET参数通过URL传递，POST放在Request body中。主要区别：GET产生一个TCP数据包;POST产生两个TCP数据包GET方法时，header和data一起发送，只发送一次；POST，header先发送，服务器响应100，再发送data，服务器发送200 OK。 返回结果的HTTP状态码1XX 信息性状态码 接受的请求正在处理2XX 成功状态码 请求正常处理完毕3XX 重定向状态码 需要进行附加操作以完成请求4XX 客户端错误状态码 服务器无法处理请求5XX 服务器错误状态码 服务器处理请求出错 500 服务器端在执行请求时发生了错误503 服务器目前无法使用，处于超负载或正在进行停机维护505 服务器不支持请求中所有的HTTP协议版本502 Bad Gateway 504 Bad Gateway timeout网关超时 web服务器故障，程序进程不够","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://fallingflower.github.io/categories/计算机网络/"}],"tags":[]},{"title":"无处宣泄的丧","slug":"无处宣泄的丧","date":"2018-09-07T08:57:18.000Z","updated":"2018-09-07T10:45:19.770Z","comments":true,"path":"2018/09/07/无处宣泄的丧/","link":"","permalink":"http://fallingflower.github.io/2018/09/07/无处宣泄的丧/","excerpt":"","text":"新学期暑假就这样过去了，新的学期也开始了一周。每天都在学习的路上，却没有真正静下心来学习过，便堆积了这满满的负能量吧（不想看大四老学姐发牢骚的请尽快远离现场！） 每天的状态现在每天的状态就是想着学习学习，还有很多东西需要学，却找不到高效的方法，让自己陷入无限的恶性循环吧。一边告诉自己，找工作还不急，现在应该做的就是充实自己的技能，一边被各种招聘吸引，海投简历，被拒绝后更是陷入痛苦中吧。自己从来不是脆弱的人，可是无论是谁面对这种投了无数的简历却没有收到任何面试的通知，恐怕都不免难过一番吧。所以还是要学习学习，做出来东西，然而现在心态爆炸，泪眼朦胧该怎么继续下去。身边的人陆续收到offer，要么埋头考研，潇洒的人却是有一片家产继承，似乎只有我困在这里。 回首平凡的出身，在那小镇里也曾是最优秀的人，高考顺利进入211大学。自问自己却从来不是一个努力的人，甚至自制力差，不爱学习 ，懒惰，剩下的或许只有偶尔的豪言壮语。大学四年，对未来没有任何目标，每天浑浑噩噩的上课，临考试应付下，专业排名20%左右却没有任何用。大三末的醒悟也没有让我坚持很长时间，一次次写下的计划，一次次让自己默默的删掉，走到现在这一步只能 说两个字’活该’！ 规划我知道一切还不晚，只是如果不改变再来四年又能怎样？改变很难，况且我这十几年的不努力，不坚持，计划永远做不到，我要改变。至少在十一之前这大半个月，我希望自己：七点起床，白天学习网络，css，js，算法和数据结构，es6，vue（顺序可以根据情况变），不能逃得课就刷牛客网的题，中午给自己半小时的午休（不回宿舍），晚上学到十点，十一点睡觉。 情感因为今天的自己特别烦躁，在他疯狂面试的这几天里，联系变得很少，今天给他发消息半个多小时都没回的情况下，聊天后不免爆发，我提分手，不接电话，就在我敲下这些负能量时，他发来短信：不要有那么大的压力，有我在。眼泪模糊了吧。 总结希望我能为自己的人生负责，给自己的大学画上满意的句话。一切都不晚，在你坚持不懈的努力下，在你一次次抗拒床的吸引，手机的呼唤下，在你就算睡眼蓬松也坚持计划下，在你一次次想放弃也咬牙坚持下，在你就算一次次失败也不放弃努力下！那或许就离成功接近了。接下来除了来学校的公司都不再投了，安心学习，准备来学校的公司或者已经投过有回应的公司。 记录接下来有几场笔试：9月8号上午10点，招商银行；9月9号上午10点，字节跳动；9月9号下午三点，第四范式。","categories":[],"tags":[{"name":"杂文","slug":"杂文","permalink":"http://fallingflower.github.io/tags/杂文/"}]},{"title":"Vue学习记录一","slug":"Vue学习记录一","date":"2018-09-04T06:57:28.000Z","updated":"2018-09-08T15:17:52.200Z","comments":true,"path":"2018/09/04/Vue学习记录一/","link":"","permalink":"http://fallingflower.github.io/2018/09/04/Vue学习记录一/","excerpt":"","text":"列表渲染对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。例如：var vm = new Vue({ data: { userProfile: { name: ‘Anika’ } }})vm.$set(vm.userProfile, ‘age’, 27)有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象 &lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;value in object&quot;&gt;{{value}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; var vm=new Vue({ el: ‘#app’, data: { object:{ age:’27’ } }})vm.object=Object.assign({},vm.object,{name:’lanzhen’,sex:’nv’}) 显示过滤有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。 var vm=new Vue({ el: ‘#app’, data: { numbers:[5,1,2,3,4,6,8,4,20] }, computed:{ eventnumber:function(){ return this.numbers.filter(function(number){ return number % 2 === 0 }) } }})一段取值范围的v-for &lt;div&gt; &lt;span v-for=&quot;n in 10&quot;&gt;{{n}}&lt;/span&gt; &lt;/div&gt; //输出12345678910 v-for 在template标签上类似于 v-if，你也可以利用带有 v-for 的 template渲染多个元素","categories":[{"name":"Vue","slug":"Vue","permalink":"http://fallingflower.github.io/categories/Vue/"}],"tags":[]},{"title":"js的Array对象常用方法","slug":"js的Array对象常用方法","date":"2018-08-20T02:59:45.000Z","updated":"2018-08-20T03:03:22.632Z","comments":true,"path":"2018/08/20/js的Array对象常用方法/","link":"","permalink":"http://fallingflower.github.io/2018/08/20/js的Array对象常用方法/","excerpt":"","text":"Array对象常用方法中：1、 concat() 连接两个或多个数组不改变原数组返回被连接数组的一个副本2、join()把数组中所有元素放入一个字符串不改变原数组返回字符串3、 slice()从已有的数组中返回选定的元素不改变原数组返回一个新数组4、 toString()把数组转为字符串不改变原数组返回数组的字符串形式改变原数组：5、 pop()删除数组最后一个元素，如果数组为空，则不改变数组，返回undefined改变原数组返回被删除的元素 6、 push() 向数组末尾添加一个或多个元素改变原数组返回新数组的长度7、 reverse()颠倒数组中元素的顺序改变原数组返回该数组8、 shift()把数组的第一个元素删除，若空数组，不进行任何操作，返回undefined改变原数组返回第一个元素的值9、 sort()对数组元素进行排序(ascii)改变原数组返回该数组10、 splice()从数组中添加/删除项目改变原数组返回被删除的元素11、 unshift()向数组的开头添加一个或多个元素改变原数组返回新数组的长度","categories":[{"name":"javaScript","slug":"javaScript","permalink":"http://fallingflower.github.io/categories/javaScript/"}],"tags":[]},{"title":"布局神器：display:flex;","slug":"布局神器：display-flex","date":"2018-08-20T02:28:52.000Z","updated":"2018-08-20T02:44:06.252Z","comments":true,"path":"2018/08/20/布局神器：display-flex/","link":"","permalink":"http://fallingflower.github.io/2018/08/20/布局神器：display-flex/","excerpt":"","text":"容器设置为flex的容器称为Flex容器，其所有子元素自动成为容器成员，称为项目。 容器属性其有6个属性： flex-direction flex-wrap flex-flow justify-content align-item align-content flex-directionflex-direction属性：决定主轴的方向（即项目的排列方向）.box { flex-direction: row | row-reverse | column | column-reverse;} row（默认）：主轴水平方向，起点在左端； row-reverse：主轴水平方向，起点在右端； column：主轴垂直方向，起点在上边沿； column-reserve：主轴垂直方向，起点在下边沿 flex-wrapflex-wrap属性：定义换行情况默认情况下，项目都排列在一条轴线上，但有可能一条轴线排不下。.box{ flex-wrap: nowrap | wrap | wrap-reverse;}nowrap（默认）：不换行；wrap：换行，第一行在上方；wrap-reverse：换行，第一行在下方。 flex-flowflex-flow属性：flex-direction和flex-wrap的简写，默认row nowrap.box{ flex-flow: || ;} justify-contentjustify-content属性：定义项目在主轴上的对齐方式。对齐方式与轴的方向有关，本文中假设主轴从左到右。 .box { justify-content: start | end | flex-start | flex-end | center | left | right | space-between | space-around | space-evenly | stretch | safe | unsafe | baseline | first baseline | last baseline;}flex-start（默认值）：左对齐；flex-end：右对齐；center：居中；space-between：两端对齐，项目之间间隔相等；space-around：每个项目两侧的间隔相等，即项目之间的间隔比项目与边框的间隔大一倍。 align-itemsalign-items属性：定义在交叉轴上的对齐方式对齐方式与交叉轴的方向有关，假设交叉轴从下到上。 .box{ align-items: flex-start | flex-end | center | baseline | stretch;}flex-start：起点对齐；flex-end：终点对齐；center：中点对齐；baseline：项目的第一行文字的基线对齐；stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度. align-contentalign-content属性：定义多根轴线的对齐方式如果项目只有一根轴线，该属性不起作用。所以，容器必须设置flex-wrap：···； .box{ align-content: flex-start | flex-end | center | space-between | space-around | stretch;}","categories":[{"name":"css","slug":"css","permalink":"http://fallingflower.github.io/categories/css/"}],"tags":[]},{"title":"jQuery中的DOM操作（jQuery学习第二篇）","slug":"jQuery中的DOM操作（jQuery学习第二篇）","date":"2018-08-02T08:43:40.000Z","updated":"2018-08-02T09:39:41.977Z","comments":true,"path":"2018/08/02/jQuery中的DOM操作（jQuery学习第二篇）/","link":"","permalink":"http://fallingflower.github.io/2018/08/02/jQuery中的DOM操作（jQuery学习第二篇）/","excerpt":"","text":"HTML-DOM 查找节点参考上一篇 查找属性节点attr()方法，参数为要查询的属性的名字； 创建节点&gt;$(html)方法：var $li_1=$(“li title=”title”&gt;文本 li&gt;”)//创建一个li元素，并为其添加title属性，内容为文本 插入节点append():向每个匹配元素内部追加内容；prepend():向每个匹配的元素内部前置内容；after():在每个匹配的元素之后插入内容；before():在每个匹配的元素之前插入内容 删除节点remove()方法，删除后该节点的所有后代节点将同时被删除，该方法删除后，还是可以继续使用的。同时可以传递参数有选择性地删除元素detach()方法：与remove()方法不同的是被删除的元素所有绑定的事件，附加的数据等都会保留下来。empty()方法：不是删除节点，而是清空节点。 复制节点clone()方法:当传递参数true时，复制元素的同时复制元素中所绑定的事件，因此该元素的副本也同样具有复制功能。 替换节点replaceWith()方法：$(“替换目标”).replaceWith(“替换内容”)","categories":[{"name":"jQuery","slug":"jQuery","permalink":"http://fallingflower.github.io/categories/jQuery/"}],"tags":[]},{"title":"如何把本地项目上传到github（最简单的方法）","slug":"如何把本地项目上传到github（最简单的方法）","date":"2018-08-01T14:55:00.000Z","updated":"2018-08-01T15:06:29.894Z","comments":true,"path":"2018/08/01/如何把本地项目上传到github（最简单的方法）/","link":"","permalink":"http://fallingflower.github.io/2018/08/01/如何把本地项目上传到github（最简单的方法）/","excerpt":"","text":"1、在github上 new repository2、点击Clone or dowload会出现一个地址，copy这个地址备用。3、在本地项目上点击GIT BASH HERE4、输入 git clone + （第二条备用的地址）5、本地会多出一个文件夹（文件名和github项目相同，把你要上传的项目文件复制到该文件夹下。6、cd 文件夹名7、依次输入以下命令 git add . （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来） git commit -m “提交信息” （注：“提交信息”里面换成你需要，如“first commit”） git push -u origin master （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码） 参考链接：https://www.cnblogs.com/cxk1995/p/5800196.html","categories":[{"name":"技术","slug":"技术","permalink":"http://fallingflower.github.io/categories/技术/"}],"tags":[{"name":"github","slug":"github","permalink":"http://fallingflower.github.io/tags/github/"}]},{"title":"jQuery选择器(jQuery学习第一篇)","slug":"jQuery选择器","date":"2018-08-01T13:10:40.000Z","updated":"2018-08-02T09:35:23.517Z","comments":true,"path":"2018/08/01/jQuery选择器/","link":"","permalink":"http://fallingflower.github.io/2018/08/01/jQuery选择器/","excerpt":"","text":"基本选择器$(“#one”)、$(“div”)、$(“.class”)、$(“*”)、$(“span,#id”) 层次选择器&amp;(“parent&gt;child”):选取parent元素下的child元素&amp;(“prev+next”):选取紧接在prev元素后的next元素(同辈元素)&amp;(“prev~sibings”):选取prev元素后的所有同辈元素 过滤选择器:first 第一个:last 最后一个:not(selector) 不是某个:even :索引是偶数:odd :索引是奇数:eq(index) ：索引等于:gt(index) 索引大于:lt(index) 索引小于:header 标题元素:animated 正在执行动画的元素:focus 当前获取焦点的元素 可见过滤选择器:hidden 选取所有不可见的元素:visible 选取所有可见的元素 属性过滤选择器$(“div[id]”) 选取拥有属性id的div元素$(“div[title=test]”) 选取属性title为’test’的div元素[attribute!=value] 选取属性的值不等于value的值[attribute^=value] 属性值以value开始的元素[attribute$=value] 属性值以value结束的元素[attribute*=value] 属性值含有value的元素[attribute|=value] 属性值以value为前缀的元素[attribute~=value] 属性用空格分隔的值中包含value的元素[attribute1][attribute2][attributen] 复合选择 表单对象属性过滤选择器$(“#form1 :enabled”) id为form1的表单中所有可见元素$(“#form1 :disabled”) id为form1的表单中所有不可见元素$(“input:checked”) 选取所有被选中的input元素$(“select option:selected”) 选取所有被选中的选项元素 表单对象属性过滤选择器:input 选取所有input textarea select button元素:text 选取所有的单行文本框:password 密码框:radio 单选框:checkbox 复选框:submit 提交按钮:image 图像按钮:reset 重置按钮:button 所有的按钮:file 所有的上传域:hidden 所有不可见元素","categories":[{"name":"jQuery","slug":"jQuery","permalink":"http://fallingflower.github.io/categories/jQuery/"}],"tags":[]},{"title":"css实现导航栏","slug":"css实现导航栏","date":"2018-07-31T02:23:30.000Z","updated":"2018-08-01T03:29:31.229Z","comments":true,"path":"2018/07/31/css实现导航栏/","link":"","permalink":"http://fallingflower.github.io/2018/07/31/css实现导航栏/","excerpt":"","text":"用html+css实现下拉导航栏代码如下 &lt;div class=&quot;box&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li class=&quot;level1&quot;&gt; &lt;a href=&quot;#none&quot; &gt;衬衫&lt;/a&gt; &lt;ul class=&quot;level2&quot;&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;短袖衬衫&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;长袖衬衫&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;短袖T恤&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;长袖T恤&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;level1&quot;&gt; &lt;a href=&quot;#none&quot;&gt;卫衣&lt;/a&gt; &lt;ul class=&quot;level2&quot;&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;开襟卫衣&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;套头卫衣&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;运动卫衣&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;童装卫衣&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;level1&quot;&gt; &lt;a href=&quot;#none&quot;&gt;裤子&lt;/a&gt; &lt;ul class=&quot;level2&quot;&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;短裤&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;休闲裤&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;牛仔裤&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#none&quot;&gt;免烫卡其裤&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; css 实现代码如下：.menu li a{ text-decoration: none; //去下划线 color: #000;}.menu li{ list-style: none;//去ul，li前的圆点； }//设置主菜单样式.level1{ width: 150px; min-height: 40px;//最小高度，以实现扩展 line-height: 40px;//高度居中 border: 1px solid #000000; background: #d8d8d8; }//实现ul,li左对齐.level1 .level2{ padding: 0px; margin: 0px;}//设置下拉菜单样式.level2 li{ display: none;//不可见 width: 150px; height: 30px; padding: 5px; background: #fff; }//鼠标滑动到主菜单颜色改变.level1:hover{ background:#999 ;}//鼠标滑动到主菜单，下拉菜单可见.level1:hover .level2 li{ display: block; }//鼠标滑动到下拉菜单，颜色改变.level2 a:hover{ background: #999;}实现效果如图：","categories":[{"name":"css","slug":"css","permalink":"http://fallingflower.github.io/categories/css/"}],"tags":[]},{"title":"the first","slug":"the-first","date":"2018-07-27T07:23:06.000Z","updated":"2018-08-01T03:29:46.657Z","comments":true,"path":"2018/07/27/the-first/","link":"","permalink":"http://fallingflower.github.io/2018/07/27/the-first/","excerpt":"","text":"周末两天再重新看一遍html+css+js的基础知识，做好笔记，重要代码写在博客里，不要让我的博客浪费！写博客步骤：1、打开git bash2、输出hexo new ‘文章名’3、hexo clean4、hexo generate5、hexo deploy","categories":[{"name":"随笔","slug":"随笔","permalink":"http://fallingflower.github.io/categories/随笔/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-06-24T01:15:30.445Z","updated":"2018-06-24T01:15:30.445Z","comments":true,"path":"2018/06/24/hello-world/","link":"","permalink":"http://fallingflower.github.io/2018/06/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}